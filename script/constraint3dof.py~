
import bge
import math
import mathutils

boolean = True
jointrot1 = math.radians(280)
jointrot2 = math.radians(280)
joint = 0
rotz = 0
bool = True




def rotbone1(theta1, joint, owner):

	owner.channels['Bone.001'].joint_rotation = mathutils.Vector([0, 0, joint])
	owner.update()
	

	b1 = owner.channels['Bone.001']
	b2 = b1.parent
	x, y, z =anglediff(b1, b2)
	rotz = math.degrees(z)

	return rotz


def anglediff(bone1, bone2):
	q1, q2 =[b.pose_matrix.to_quaternion() for b in [bone1, bone2]]
	return q1.rotation_difference(q2).to_euler()

def rotbone2(theta2, joint, owner):

	owner.channels['Bone.002'].joint_rotation = mathutils.Vector([0, 0, joint2])
	owner.update()
	
	b1 = owner.channels['Bone.002']
	b2 = b1.parent
	x, y, z =anglediff(b1, b2)
	rotz = math.degrees(z)
	
	return rotz

def movejoint2(boolean, owner, angle2):
	global joint, jointrot2, rotz

	if(boolean == True):
		if(angle2 >= 0):
			print(joint)
			print(rotz)
			#if(joint < jointrot2 and angle2 >= -rotz):


def movejoint1(boolean, owner, angle1):
	global joint, jointrot1, rotz

	if (boolean == True):
		if(angle1 >= 0):

			if(joint< jointrot1 and angle1 >= -rotz):
				joint 	= joint+ (math.pi/1000)*2
				rotz 	= movebone1(angle1, joint, owner)
				
				
			else:
				boolean= False

		elif(angle1<0):

			if((joint > -jointrot1) and (-rotz >= angle1)):
				joint = joint- (math.pi/1000)*2
				rotz = rotbone1(angle1, joint, owner)
				
			else:
				boolean = False
				print("in")

		else:
			boolean = False
	return boolean
def main():
	global boolean, jointrot1, bool

	armature = bge.logic.getCurrentController()
	owner= armature.owner

	angle1 = -45
	angle2 = 45
	if(bool == True):
		bool = movejoint1(boolean, owner, angle1)
		print("in")



	#movejoint2(boolean, owner, angle2)
